<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>CPU Scheduling Hub</title>
    <script src="https://cdn.tailwindcss.com"></script>
    <style>
        @keyframes fadeIn {
            from { opacity: 0; transform: translateY(25px); }
            to { opacity: 1; transform: translateY(0); }
        }
        @keyframes bounce {
            0%, 100% { transform: translateY(0); }
            50% { transform: translateY(-5px); }
        }
        .fade-in { animation: fadeIn 0.5s ease-out forwards; }
        .card {
            background: rgba(255, 255, 255, 0.95);
            border: 1px solid rgba(209, 213, 219, 0.3);
            box-shadow: 0 10px 30px rgba(0, 0, 0, 0.1);
            transition: transform 0.3s ease, box-shadow 0.3s ease;
        }
        .card:hover {
            transform: translateY(-6px);
            box-shadow: 0 15px 40px rgba(0, 0, 0, 0.15);
        }
        .gantt-block {
            display: inline-flex;
            align-items: center;
            padding: 0.6rem 1.2rem;
            margin: 0.3rem;
            border-radius: 0.5rem;
            background: linear-gradient(135deg, #f87171, #fb923c);
            color: white;
            font-weight: 600;
            transition: transform 0.3s ease;
        }
        .gantt-block:hover {
            transform: scale(1.1);
            animation: bounce 0.5s infinite;
        }
        body {
            background: linear-gradient(120deg, #ffedd5, #f9a8d4);
        }
        .btn-primary {
            background: linear-gradient(to right, #d946ef, #8b5cf6);
            transition: background 0.3s ease, transform 0.3s ease;
        }
        .btn-primary:hover {
            background: linear-gradient(to right, #c026d3, #7c3aed);
            transform: scale(1.05);
        }
        .btn-secondary {
            background: linear-gradient(to right, #facc15, #fb923c);
            transition: background 0.3s ease, transform 0.3s ease;
        }
        .btn-secondary:hover {
            background: linear-gradient(to right, #eab308, #f97316);
            transform: scale(1.05);
        }
    </style>
</head>
<body class="min-h-screen font-sans text-gray-900">
    <div class="container mx-auto p-8 md:p-12">
        <!-- Header -->
        <header class="text-center mb-16">
            <h1 class="text-5xl md:text-6xl font-extrabold tracking-tight bg-clip-text text-transparent bg-gradient-to-r from-orange-500 to-pink-500">
                CPU Scheduling Visualizer
                <span class="block text-xl font-medium text-gray-600 mt-2">Where Efficiency Meets Energy</span>
            </h1>
        </header>

        <!-- Input Form -->
        <section class="card p-8 rounded-2xl mb-16">
            <h2 class="text-3xl font-bold text-gray-900 mb-8 bg-clip-text text-transparent bg-gradient-to-r from-orange-400 to-pink-400">Craft Your Simulation</h2>
            
            <div class="grid grid-cols-1 md:grid-cols-3 gap-6 mb-10">
                <div>
                    <label class="block text-gray-700 font-medium mb-2">Number of Processes</label>
                    <input id="numProcesses" type="number" min="1" max="10" class="w-full p-3 bg-gray-50 border border-gray-200 rounded-lg text-gray-800 placeholder-gray-400 focus:ring-4 focus:ring-orange-400 focus:outline-none transition-all duration-300" placeholder="e.g., 4" value="1">
                </div>
                <div>
                    <label class="block text-gray-700 font-medium mb-2">Algorithm</label>
                    <select id="algorithm" class="w-full p-3 bg-gray-50 border border-gray-200 rounded-lg text-gray-800 focus:ring-4 focus:ring-orange-400 focus:outline-none transition-all duration-300">
                        <option value="1">FCFS</option>
                        <option value="2">SJF</option>
                        <option value="3">Round Robin</option>
                        <option value="4">Priority Scheduling</option>
                    </select>
                </div>
                <div class="flex items-end">
                    <button id="generateBtn" class="w-full bg-gradient-to-r from-blue-500 to-indigo-600 text-white px-6 py-3 rounded-lg hover:from-blue-600 hover:to-indigo-700 transition-all duration-300">Generate Inputs</button>
                </div>
            </div>

            <div id="quantumInput" class="mt-6 hidden">
                <label class="block text-gray-700 font-medium mb-2">Time Quantum (Round Robin)</label>
                <input id="quantum" type="number" min="1" class="w-32 p-3 bg-gray-50 border border-gray-200 rounded-lg text-gray-800 placeholder-gray-400 focus:ring-4 focus:ring-orange-400 focus:outline-none transition-all duration-300" value="2">
            </div>
            
            <div id="processInputs" class="space-y-6 mt-10"></div>
            
            <button onclick="calculate()" class="mt-10 w-full btn-secondary text-white px-8 py-4 rounded-lg text-lg font-semibold">Launch Simulation</button>
        </section>

        <!-- Results -->
        <section id="results" class="hidden card p-8 rounded-2xl">
            <h2 class="text-3xl font-bold text-gray-900 mb-8 bg-clip-text text-transparent bg-gradient-to-r from-orange-400 to-pink-400">Simulation Breakdown</h2>
            
            <div class="overflow-x-auto bg-white p-6 rounded-xl shadow-inner">
                <table id="resultTable" class="w-full text-left">
                    <thead id="tableHead" class="bg-orange-50 text-orange-800"></thead>
                    <tbody id="resultBody" class="text-gray-700"></tbody>
                </table>
            </div>
            
            <div class="mt-8 grid grid-cols-1 md:grid-cols-2 gap-6">
                <p id="avgWT" class="text-lg font-semibold bg-orange-50 p-4 rounded-lg text-orange-800"></p>
                <p id="avgTAT" class="text-lg font-semibold bg-teal-50 p-4 rounded-lg text-teal-800"></p>
            </div>
            
            <h3 class="mt-8 text-2xl font-semibold text-gray-900">Execution Flow</h3>
            <div id="ganttChart" class="mt-6 p-6 bg-white/90 rounded-xl shadow-inner flex flex-wrap gap-3"></div>
        </section>
    </div>

    <script>
        // Toggle Quantum Input visibility for Round Robin
        document.getElementById('algorithm').addEventListener('change', function() {
            document.getElementById('quantumInput').classList.toggle('hidden', this.value !== '3');
        });

        // Generate input fields for processes
        function generateInputs() {
            const numProcessesInput = document.getElementById('numProcesses');
            const n = parseInt(numProcessesInput.value);
            const processInputs = document.getElementById('processInputs');

            // Validate input
            if (isNaN(n) || n < 1 || n > 10) {
                alert("Please enter a valid number of processes (1-10).");
                numProcessesInput.value = 1; // Reset to default
                processInputs.innerHTML = '';
                return;
            }

            // Clear previous inputs
            processInputs.innerHTML = '';

            // Generate new input fields
            for (let i = 0; i < n; i++) {
                processInputs.innerHTML += `
                    <div class="flex space-x-4 items-center">
                        <label class="w-12 text-gray-700 font-medium">P${i + 1}</label>
                        <input type="number" placeholder="Arrival" min="0" class="arrival w-32 p-3 bg-gray-50 border border-gray-200 rounded-lg text-gray-800 focus:ring-4 focus:ring-orange-400 focus:outline-none transition-all duration-300" data-id="${i}">
                        <input type="number" placeholder="Burst" min="1" class="burst w-32 p-3 bg-gray-50 border border-gray-200 rounded-lg text-gray-800 focus:ring-4 focus:ring-orange-400 focus:outline-none transition-all duration-300" data-id="${i}">
                    </div>`;
            }
        }

        // Attach event listener to the button
        document.getElementById('generateBtn').addEventListener('click', generateInputs);

        // Calculate simulation (FCFS example)
        function calculate() {
            const algorithm = document.getElementById('algorithm').value;
            const arrivals = Array.from(document.getElementsByClassName('arrival')).map(input => parseInt(input.value) || 0);
            const bursts = Array.from(document.getElementsByClassName('burst')).map(input => parseInt(input.value) || 0);

            if (arrivals.length === 0 || bursts.length === 0) {
                alert("Please generate and fill in process details!");
                return;
            }

            // Validate inputs
            if (bursts.some(b => b <= 0)) {
                alert("Burst times must be greater than 0!");
                return;
            }

            // FCFS Implementation
            if (algorithm === "1") {
                let processes = arrivals.map((arrival, i) => ({
                    id: i + 1,
                    arrival: arrival,
                    burst: bursts[i]
                }));

                processes.sort((a, b) => a.arrival - b.arrival);

                let currentTime = 0;
                let waitingTime = 0;
                let turnaroundTime = 0;
                let gantt = [];

                processes.forEach(p => {
                    if (currentTime < p.arrival) currentTime = p.arrival;
                    p.start = currentTime;
                    p.finish = currentTime + p.burst;
                    p.waiting = p.start - p.arrival;
                    p.turnaround = p.finish - p.arrival;

                    waitingTime += p.waiting;
                    turnaroundTime += p.turnaround;

                    gantt.push({ process: `P${p.id}`, start: p.start, finish: p.finish });
                    currentTime = p.finish;
                });

                const avgWT = waitingTime / processes.length;
                const avgTAT = turnaroundTime / processes.length;

                // Display results
                document.getElementById('results').classList.remove('hidden');
                document.getElementById('tableHead').innerHTML = `
                    <tr>
                        <th class="p-3">Process</th>
                        <th class="p-3">Arrival</th>
                        <th class="p-3">Burst</th>
                        <th class="p-3">Waiting</th>
                        <th class="p-3">Turnaround</th>
                    </tr>`;
                document.getElementById('resultBody').innerHTML = processes.map(p => `
                    <tr>
                        <td class="p-3">P${p.id}</td>
                        <td class="p-3">${p.arrival}</td>
                        <td class="p-3">${p.burst}</td>
                        <td class="p-3">${p.waiting}</td>
                        <td class="p-3">${p.turnaround}</td>
                    </tr>`).join('');
                document.getElementById('avgWT').textContent = `Average Waiting Time: ${avgWT.toFixed(2)}`;
                document.getElementById('avgTAT').textContent = `Average Turnaround Time: ${avgTAT.toFixed(2)}`;
                document.getElementById('ganttChart').innerHTML = gantt.map(g => `
                    <div class="gantt-block">${g.process} (${g.start}-${g.finish})</div>`).join('');
            } else {
                alert("Only FCFS is implemented in this example. Add logic for other algorithms!");
            }
        }
    </script>
</body>
</html>